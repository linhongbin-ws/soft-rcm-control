% load simulated data
load(fullfile( '..','data','dvrk_mtm_psm.mat'))

% init
Flexiv_q0 = zeros(7,1);
time_delta = 0.01; % 100hz
lambda = 1/time_delta;
duration = 5;
R = [1 0 0;
     0  -1 0;
     0   0  -1];

% telep tracking
Flexiv_Model = Flexiv_URDF_Model();
[Flexiv_T_initial,~] = FK_Jacob_Geometry(Flexiv_q0,Flexiv_Model.URDF, Flexiv_Model.tip, Flexiv_Model.method);
Flexiv_T_initial = Flexiv_T_initial[]
Flexiv_qs = [Flexiv_q0];
MTM_T_initial = mtm_x(:,:,1);
for i = 2:size(mtm_x,3)
    qt = Flexiv_qs(:,end);
    mtm_xt = mtm_x(:,:,i);
    mtm_xt_1 = mtm_x(:,:,i-1);
    
    [xt,Jt] =FK_Jacob_Geometry(qt, Flexiv_Model.URDF, Flexiv_Model.tip, Flexiv_Model.method);
    xt = xt(:,:,end);
    xd_t = MTM_to_Flexiv_Mapping(mtm_x(:,:,i), R, MTM_T_initial, Flexiv_T_initial);
    [xe_t, delta_theta] = T_Error(xt,xd_t);
    [mtm_v_t, delta_theta] = T_Error(mtm_xt,mtm_xt_1);
    vd_t = [R*mtm_v_t(1:3);R*mtm_v_t(4:6)];
    qdot_t = Inv_Jacob_Redundant_Control(xe_t, vd_t, Jt, lambda, zeros(7,1));
    Flexiv_qs = [Flexiv_qs, qt+qdot_t*time_delta];
    if(mod(i,20) == 0)
    endpose_graphical(xt(1:3,1:3), xt(1:3,4),i);
    end
end
% MTM_Final = mtm_x(:,:,i);

% for t = time_delta:time_delta:duration
%     [xd_t, vd_t] = Design_Trajectory(t,x0);
%     graphical(xd_t(1:3,1:3), xd_t(1:3,4));
% end
% 
% d_size = size(psm_x_dsr);
% for i = 1:d_size(3)
%     if(mod(i,50) == 0)
%         MTM_graphical(psm_x_dsr(1:3,1:3,i), psm_x_dsr(1:3,4,i),i);
%         %pause(0.5);
%     end
% end
% 
% PSM_Final = psm_x_dsr(:,:,i);

% d_size = size(mtm_x);
% for i = 1:d_size(3)
%     if(mod(i,50) == 0)
%         graphical(mtm_x(1:3,1:3,i), mtm_x(1:3,4,i),i);
%         %pause(0.5);
%     end
% end

% d_size = size(PSM_q)
% for i=1:d_size(2)
%     graphical(PSM_q, PSM_q);
% end

% 
% 
% function [X,V] = Design_Trajectory(t,T0)
%     X = T0*Transl(1*sin(t),'y')*Rot(t,'x');
%     V = [[0;10*cos(t);0];T0(1:3,1:3)*[1;0;0]];
% end


